/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ecommerce.webflux.service.app.api.rest.controllers.v1;

import ecommerce.webflux.service.app.api.rest.dtos.v1.Rate;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-20T18:20:33.416025700+01:00[Europe/Madrid]")
@Validated
@Tag(name = "Rate", description = "the Rate API")
public interface RateApi {

    /**
     * POST /v1/rate : Create a new rate
     *
     * @param rate Use the required fields to create a new rate. (required)
     * @return Use the required fields to create a new rate. (status code 201)
     *         or Invalid price or currency code format (status code 422)
     *         or Service unavailable (status code 503)
     */
    @Operation(
        operationId = "addRate",
        summary = "Create a new rate",
        tags = { "rate" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Use the required fields to create a new rate.", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Rate.class))),
            @ApiResponse(responseCode = "422", description = "Invalid price or currency code format"),
            @ApiResponse(responseCode = "503", description = "Service unavailable")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/rate",
        produces = { "text/event-stream" },
        consumes = { "text/event-stream" }
    )
    default Mono<ResponseEntity<Flux<Rate>>> _addRate(
        @Parameter(name = "Rate", description = "Use the required fields to create a new rate.", required = true, schema = @Schema(description = "")) @Valid @RequestBody Mono<Rate> rate,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return addRate(rate, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Flux<Rate>>> addRate(Mono<Rate> rate,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                String exampleString = "";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
